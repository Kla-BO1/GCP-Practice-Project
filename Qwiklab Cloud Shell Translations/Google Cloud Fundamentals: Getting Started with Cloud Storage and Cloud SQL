#Overview
#In this lab, you create a Cloud Storage bucket and place an image in it. You'll also configure an application running in Compute Engine to use a database managed by Cloud SQL. 
#For this lab, you will configure a web server with PHP, a web development environment that is the basis for popular blogging software. Outside this lab, you will use 
#analogous techniques to configure these packages.

#You also configure the web server to reference the image in the Cloud Storage bucket.

#Objectives
#In this lab, you learn how to perform the following tasks:

#Create a Cloud Storage bucket and place an image into it.

#Create a Cloud SQL instance and configure it.

#Connect to the Cloud SQL instance from a web server.

#Use the image in the Cloud Storage bucket on a web page.

#Task 2: Deploy a web server VM instance

gcloud compute --project=qwiklabs-gcp-02-06e2a0f862ed instances create bloghost --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM 
--metadata=startup-script=apt-get\ update$'\n'apt-get\ install\ apache2\ php\ php-mysql\ -y$'\n'service\ apache2\ restart --maintenance-policy=MIGRATE 
--service-account=538820251592-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,
https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,
https://www.googleapis.com/auth/trace.append --tags=http-server --image=debian-9-stretch-v20200910 --image-project=debian-cloud --boot-disk-size=10GB 
--boot-disk-type=pd-standard --boot-disk-device-name=bloghost --reservation-affinity=any

gcloud compute --project=qwiklabs-gcp-02-06e2a0f862ed firewall-rules create default-allow-http --direction=INGRESS --priority=1000 --network=default 
--action=ALLOW --rules=tcp:80 --source-ranges=0.0.0.0/0 --target-tags=http-server

#Task 3: Create a Cloud Storage bucket using the gsutil command line

#For convenience, enter your chosen location into an environment variable called LOCATION

export LOCATION=US

#In Cloud Shell, the DEVSHELL_PROJECT_ID environment variable contains your project ID. Enter this command to make a bucket named after your project ID:

gsutil mb -l $LOCATION gs://$DEVSHELL_PROJECT_ID

#Retrieve a banner image from a publicly accessible Cloud Storage location:

gsutil cp gs://cloud-training/gcpfci/my-excellent-blog.png my-excellent-blog.png

#Copy the banner image to your newly created Cloud Storage bucket:

gsutil cp my-excellent-blog.png gs://$DEVSHELL_PROJECT_ID/my-excellent-blog.png

#Modify the Access Control List of the object you just created so that it is readable by everyone:

gsutil acl ch -u allUsers:R gs://$DEVSHELL_PROJECT_ID/my-excellent-blog.png


#Task 4: Create the Cloud SQL instance

#In the GCP Console, on the Navigation menu (Navigation menu), click SQL.

#Click Create instance.

#For Choose a database engine, select MySQL.

#For Instance ID, type blog-db, and for Root password type a password of your choice.

#Choose a password that you remember. There's no need to obscure the password because you'll use mechanisms to connect that aren't open access to everyone.

#Set the region and zone assigned by Qwiklabs.
#This is the same region and zone into which you launched the bloghost instance. The best performance is achieved by placing the client and the database close to each other.

#Click Create.
#Wait for the instance to finish deploying. It will take a few minutes.

#Click on the name of the instance, blog-db, to open its details page.

#From the SQL instances details page, copy the Public IP address for your SQL instance to a text editor for use later in this lab.

#Click on Users menu on the left-hand side, and then click ADD USER ACCOUNT.

#For User name, type blogdbuser

#For Password, type a password of your choice. Make a note of it.

#Click Create to create the user account in the database.

#Wait for the user to be created.

#Click the Connections tab, and then click Add network.
#If you are offered the choice between a Private IP connection and a Public IP connection, choose Public IP for purposes of this lab. The Private IP feature is in beta at the time this lab was written.

#The Add network button may be grayed out if the user account creation is not yet complete.

#For Name, type web front end

#For Network, type the external IP address of your bloghost VM instance, followed by /32

#The result will look like this:

#35.192.208.2/32

#Be sure to use the external IP address of your VM instance followed by /32. Do not use the VM instance's internal IP address. Do not use the sample IP address shown here.

#Click Done to finish defining the authorized network.

#Click Save to save the configuration change.

#Task 5: Configure an application in a Compute Engine instance to use Cloud SQL

gcloud compute ssh --project qwiklabs-gcp-02-06e2a0f862ed --zone us-central1-a bloghost

cd /var/www/html

sudo nano index.php

#Paste the content below into the file:

<html>
<head><title>Welcome to my excellent blog</title></head>
<body>
<h1>Welcome to my excellent blog</h1>
<?php
 $dbserver = "CLOUDSQLIP";
$dbuser = "blogdbuser";
$dbpassword = "DBPASSWORD";
// In a production blog, we would not store the MySQL
// password in the document root. Instead, we would store it in a
// configuration file elsewhere on the web server VM instance.

$conn = new mysqli($dbserver, $dbuser, $dbpassword);

if (mysqli_connect_error()) {
        echo ("Database connection failed: " . mysqli_connect_error());
} else {
        echo ("Database connection succeeded.");
}
?>
</body></html>

#Press Ctrl+O, and then press Enter to save your edited file.

#Press Ctrl+X to exit the nano text editor.

#Restart the web server:

sudo service apache2 restart

#Open a new web browser tab and paste into the address bar your bloghost VM instance's external IP address followed by /index.php. The URL will look like this:

35.224.166.70/index.php

#Be sure to use the external IP address of your VM instance followed by /index.php. Do not use the VM instance's internal IP address. Do not use the sample IP address shown here.

#When you load the page, you will see that its content includes an error message beginning with the words:

Database connection failed: ...

#This message occurs because you have not yet configured PHP's connection to your Cloud SQL instance.

#Return to your ssh session on bloghost. Use the nano text editor to edit index.php again.

sudo nano index.php

#In the nano text editor, replace CLOUDSQLIP with the Cloud SQL instance Public IP address that you noted above. Leave the quotation marks around the value in place.

#In the nano text editor, replace DBPASSWORD with the Cloud SQL database password that you defined above. Leave the quotation marks around the value in place.

<html>
<head><title>Welcome to my excellent blog</title></head>
<body>
<h1>Welcome to my excellent blog</h1>
<?php
 $dbserver = "35.224.166.70";
$dbuser = "blogdbuser";
$dbpassword = "blogdbuser";
// In a production blog, we would not store the MySQL
// password in the document root. Instead, we would store it in a
// configuration file elsewhere on the web server VM instance.

$conn = new mysqli($dbserver, $dbuser, $dbpassword);

if (mysqli_connect_error()) {
        echo ("Database connection failed: " . mysqli_connect_error());
} else {
        echo ("Database connection succeeded.");
}
?>
</body></html>

#Press Ctrl+O, and then press Enter to save your edited file.

#Press Ctrl+X to exit the nano text editor.

#Restart the web server:

sudo service apache2 restart

#Return to the web browser tab in which you opened your bloghost VM instance's external IP address. When you load the page, the following message appears:

Database connection succeeded.

In an actual blog, the database connection status would not be visible to blog visitors. Instead, the database connection would be managed solely by the administrator.

#Task 6: Configure an application in a Compute Engine instance to use a Cloud Storage object
In the GCP Console, click Storage > Browser.

#Click on the bucket that is named after your GCP project.

#In this bucket, there is an object called my-excellent-blog.png. Copy the URL behind the link icon that appears in that object's Public access column, 
#or behind the words "Public link" if shown.

#If you see neither a link icon nor a "Public link", try refreshing the browser. If you still do not see a link icon, return to Cloud Shell and confirm that your attempt to change the object's Access Control list with the gsutil acl ch command was successful.

#Return to your ssh session on your bloghost VM instance.

#Enter this command to set your working directory to the document root of the web server:

cd /var/www/html

#Use the nano text editor to edit index.php:

sudo nano index.php

#Use the arrow keys to move the cursor to the line that contains the h1 element. Press Enter to open up a new, blank screen line, and then paste the URL 
#you copied earlier into the line.

#Paste this HTML markup immediately before the URL:

<img src='https://storage.googleapis.com/qwiklabs-gcp-02-06e2a0f862ed/my-excellent-blog.png'>

#Press Ctrl+O, and then press Enter to save your edited file.

#Press Ctrl+X to exit the nano text editor.

#Restart the web server:

sudo service apache2 restart

#Return to the web browser tab in which you opened your bloghost VM instance's external IP address. When you load the page, its content now includes a banner image.




